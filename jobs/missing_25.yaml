description: example job

target:
  service: sing
  name: msrresrchvc
  workspace_name: gcrllama2ws

code:  
  local_dir: /home/t-smantena/deep-fMRI-dataset # path to your code on local machine

environment:
  image: amlt-sing/acpt-2.3.1-py3.10-cuda12.1
  setup:
    # working directory is local_dir under code above
    - pip install -r requirements.txt --user # install requirements from file
    # - pip install . # install a package from the local directory


storage:
  data:
    storage_account_name: internblobdl
    container_name: t-smantena
    mount_dir: /blob_data # path to mount the blob on the remote machine

  
# sku controls the compute you will use
# here are some common ones you may use

# cpu jobs
# 10C3  # 4 cores, 30 GBs mem
# 8C7   # 8 cores, 56 GBs mem
# 8C15  # 15 cores, 120 GBs mem
# 8C30  # 30 cores, 240 GBs mem
# 8C60  # 60 cores, 480 GBs mem

# gpu jobs
# G1-V100 # 1 V100 GPU
# G2-V100 # 2 V100 GPUs
# G1-A100 # 1 A100 GPU


jobs:
- name: infini_1_10
  process_count_per_node: 1
  sku: G1-A100
  command:
  - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_infini_10 --x 900 --k 1.0
- name: infini_w_cont_1_10
  process_count_per_node: 1
  sku: G1-A100
  command:
  - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_infini_w_cont_10 --x 900 --k 1.0
- name: incont_infini_1_10
  process_count_per_node: 1
  sku: G1-A100
  command:
  - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_incont_infini_10 --x 900 --k 1.0
- name: infini_gpt_1d_10
  process_count_per_node: 1
  sku: G1-A100
  command:
  - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_incont_dist_gpt_10 --x 900 --k 1.0
- name: infini_llama_1d_10
  process_count_per_node: 1
  sku: G1-A100
  command:
  - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_incont_dist_llama_10 --x 900 --k 1.0
- name: eng_1000_10
  process_count_per_node: 1
  sku: G1-A100
  command:
  - python3 encoding/encoding.py --subject UTS03 --feature eng1000_10

  # - name: infini_w_cont_0.8
#   process_count_per_node: 1
#   sku: 64G2-MI200-xGMI
#   command:
#   - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_infini_w_cont --x 900 --k 0.8
# - name: incont_infini_0.2
#   process_count_per_node: 1
#   sku: 64G2-MI200-xGMI
#   command:
#   - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_incont_infini --x 900 --k 0.2



# - name: gen_dist_gpt
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature incont_dist_gpt
# - name: gen_dist_llama
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature incont_dist_llama
# - name: infini_gpt_1d
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_incont_dist_gpt --x 900 --k 1.0
# - name: infini_gpt_0.8d
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_incont_dist_gpt --x 900 --k 0.8
# - name: infini_llama_1d
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_incont_dist_llama --x 900 --k 1.0
# - name: infini_llama_0.8d
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding_PResp.py --subject UTS03 --feature pca_tr_incont_dist_llama --x 900 --k 0.8

# # - name: infini_llama_p
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding_PResp.py --subject UTS03 --feature incont_llama_p --x 900
# - name: infini_gpt_p
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding_PResp.py --subject UTS03 --feature incont_gpt_p --x 900
# - name: gen_gpt
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature incont_fuzzy_gpt
# - name: 8_256_f
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature llama_k_window_avg --k 16 --x 512
# - name: 8_256_f
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature llama_k_window_avg --k 16 --x 2048
# - name: 16_512_f
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature llama_window --k 16 --x 512
# - name: 32_1024_f
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature llama_window --k 32 --x 1024
# - name: 32_2x
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature llama_2x --k 32
# - name: l_4
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature llama --k 4
# - name: l_8
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature llama --k 8
# - name: l_16
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature llama --k 16
# - name: l_32
#   process_count_per_node: 1
#   sku: G1-A100
#   command:
#   - python3 encoding/encoding.py --subject UTS03 --feature llama --k 32